import sys
import os
import json
import requests
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QTextEdit, QPushButton, QFileDialog,
    QComboBox, QProgressBar, QMessageBox, QListWidget, QListWidgetItem,
    QSplitter, QFrame, QRadioButton, QButtonGroup, QStackedWidget
)
from PySide6.QtCore import Qt, QThread, Signal
from PySide6.QtGui import QIcon, QFont, QPalette, QColor

# ==================== HELPER FUNCTION FOR ICON RESOURCE ====================
# This function ensures the icon can be found whether running from source or as a bundled app
def resource_path(relative_path):
    """ Get absolute path to resource, works for dev and for PyInstaller """
    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)

# ==================== DEFAULT SETTINGS INTEGRATED IN CODE ====================
DEFAULT_SETTINGS = {
    "api_key": "",
    "model": "gemini",
    "prompt": "B·∫°n l√† chuy√™n gia ng√¥n ng·ªØ h·ªçc v·ªõi kinh nghi·ªám x√¢y d·ª±ng h·ªá th·ªëng t·ª´ v·ª±ng v√† ph∆∞∆°ng ph√°p ghi nh·ªõ hi·ªáu qu·∫£. H√£y t·∫°o th·∫ª t·ª´ v·ª±ng chi ti·∫øt, tr·ª±c quan v√† ƒë·∫ßy ƒë·ªß th√¥ng tin cho qu√° tr√¨nh h·ªçc ti·∫øng Anh.\n\nN·∫øu ƒë·ªông t·ª´ kh√¥ng ·ªü d·∫°ng nguy√™n g·ªëc h√£y ƒë∆∞a v·ªÅ d·∫°ng nguy√™n g·ªëc.\n\nH√£y t·∫°o m·ªôt th·∫ª t·ª´ v·ª±ng chi ti·∫øt cho t·ª´ v·ª±ng ƒë∆∞·ª£c cung c·∫•p theo ti√™u chu·∫©n h·ªçc thu·∫≠t v√† ng√¥n ng·ªØ h·ªçc, v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin t·ª´ ph√°t √¢m, ƒë·ªãnh nghƒ©a ƒë·∫øn ng·ªØ c·∫£nh s·ª≠ d·ª•ng v√† m·ªëi li√™n h·ªá v·ªõi c√°c t·ª´ kh√°c.\n\n---\nword: [t·ª´ v·ª±ng]\npronunciation: '/phi√™n_√¢m_qu·ªëc_t·∫ø/'\npos:\n  - [noun/adverb/...]\nlevel:\n  - [A1/A2/B1/B2/C1/C2]\ntopics:\n  - [business/technology/academic/...]\n  - [topic2]\n  - [topic3]\nsynonyms:\n  - [word1]\n  - [word2]\n  - [word3]\nantonyms:\n  - [word1]\n  - [word2]\ncreated: [yyyy-mm-dd]\ncompleted: [true/false]\naliases:\n  - [infinitive form]\n  - [past tense form]\n  - [present/past participle forms]\n  - [noun form]\n  - [adjective form]\n  - [etc]\n---\n# {{t·ª´ v·ª±ng}}\n## ƒê·ªãnh nghƒ©a\n> [!info] üìö ƒê·ªãnh nghƒ©a\n> - Nghƒ©a ti·∫øng Vi·ªát: [Cung c·∫•p ƒë·ªãnh nghƒ©a r√µ r√†ng, ƒë·∫ßy ƒë·ªß b·∫±ng ti·∫øng Vi·ªát]\n> - Nghƒ©a ti·∫øng Anh: [Cung c·∫•p ƒë·ªãnh nghƒ©a r√µ r√†ng, ƒë·∫ßy ƒë·ªß b·∫±ng ti·∫øng Anh]\n\n## Ph√°t √¢m\n> [!note] üîä L∆∞u √Ω ph√°t √¢m\n> C√°c ƒëi·ªÉm c·∫ßn l∆∞u √Ω khi ph√°t √¢m t·ª´ n√†y, bao g·ªìm: tr·ªçng √¢m, c√°ch ph√°t √¢m c√°c √¢m kh√≥, s·ª± kh√°c bi·ªát gi·ªØa ph√°t √¢m c·ªßa t·ª´ n√†y trong c√°c bi·∫øn th·ªÉ ti·∫øng Anh (Anh, M·ªπ, √öc...) n·∫øu c√≥.\n>Audio: ![[{t·ª´ v·ª±ng}.mp3]] \n\n## V√≠ d·ª•\n> [!example] üìù V√≠ d·ª•\n> 1. [C√¢u v√≠ d·ª• 1 - m·ªôt c√¢u ho√†n ch·ªânh s·ª≠ d·ª•ng t·ª´ v·ª±ng trong ng·ªØ c·∫£nh t·ª± nhi√™n]\n> 2. [C√¢u v√≠ d·ª• 2 - m·ªôt c√¢u ho√†n ch·ªânh s·ª≠ d·ª•ng t·ª´ v·ª±ng trong ng·ªØ c·∫£nh kh√°c]\n> 3. [C√¢u v√≠ d·ª• 3 - n·∫øu t·ª´ c√≥ nhi·ªÅu c√°ch s·ª≠ d·ª•ng kh√°c nhau]\n\n## Collocations (C·ª•m t·ª´ th√¥ng d·ª•ng)\n> [!tip] üîÑ C·ª•m t·ª´ th√¥ng d·ª•ng\n> - [C·ª•m t·ª´ 1] - [gi·∫£i th√≠ch ng·∫Øn g·ªçn n·∫øu c·∫ßn]\n> - [C·ª•m t·ª´ 2] - [gi·∫£i th√≠ch ng·∫Øn g·ªçn n·∫øu c·∫ßn]\n> - [C·ª•m t·ª´ 3] - [gi·∫£i th√≠ch ng·∫Øn g·ªçn n·∫øu c·∫ßn]\n\n## Phrases & Idioms (Th√†nh ng·ªØ, t·ª•c ng·ªØ)\n> [!quote] üí¨ Th√†nh ng·ªØ, t·ª•c ng·ªØ\n> - [[Th√†nh ng·ªØ/t·ª•c ng·ªØ 1]]: [Gi·∫£i th√≠ch √Ω nghƒ©a chi ti·∫øt v√† c√°ch s·ª≠ d·ª•ng]\n> - [[Th√†nh ng·ªØ/t·ª•c ng·ªØ 2]]: [Gi·∫£i th√≠ch √Ω nghƒ©a chi ti·∫øt v√† c√°ch s·ª≠ d·ª•ng]\n\n## Ng·ªØ c·∫£nh s·ª≠ d·ª•ng\n> [!abstract] üåê Ng·ªØ c·∫£nh s·ª≠ d·ª•ng\n> - üèõÔ∏è Ng·ªØ c·∫£nh trang tr·ªçng: [C√°ch s·ª≠ d·ª•ng t·ª´ n√†y trong ng·ªØ c·∫£nh trang tr·ªçng, h·ªçc thu·∫≠t ho·∫∑c c√¥ng vi·ªác]\n> - üèôÔ∏è Ng·ªØ c·∫£nh th√¥ng th∆∞·ªùng: [C√°ch s·ª≠ d·ª•ng t·ª´ n√†y trong giao ti·∫øp h√†ng ng√†y]\n> - üè† Ng·ªØ c·∫£nh kh√¥ng trang tr·ªçng: [C√°ch s·ª≠ d·ª•ng t·ª´ n√†y trong giao ti·∫øp th√¢n m·∫≠t, kh√¥ng trang tr·ªçng]\n\n## T·ª´ ƒë·ªìng √¢m (n·∫øu c√≥)\n> [!warning] üîÑ T·ª´ ƒë·ªìng √¢m\n> - [[t·ª´ ƒë·ªìng √¢m 1]]: [gi·∫£i th√≠ch s·ª± kh√°c bi·ªát v·ªÅ √Ω nghƒ©a v√† c√°ch s·ª≠ d·ª•ng]\n> - [[t·ª´ ƒë·ªìng √¢m 2]]: [gi·∫£i th√≠ch s·ª± kh√°c bi·ªát v·ªÅ √Ω nghƒ©a v√† c√°ch s·ª≠ d·ª•ng]\n\n## T·ª´ li√™n quan\n> [!link] üîó T·ª´ li√™n quan\n> - [[t·ª´ li√™n quan 1]]: [m·ªëi li√™n h·ªá v·ªõi t·ª´ g·ªëc]\n> - [[t·ª´ li√™n quan 2]]: [m·ªëi li√™n h·ªá v·ªõi t·ª´ g·ªëc]\n\n## G·ªëc t·ª´ / T·ª´ nguy√™n\n> [!cite] üìú G·ªëc t·ª´ / T·ª´ nguy√™n\n> [G·ªëc t·ª´, ngu·ªìn g·ªëc v√† l·ªãch s·ª≠ c·ªßa t·ª´, bao g·ªìm ng√¥n ng·ªØ g·ªëc, thay ƒë·ªïi nghƒ©a theo th·ªùi gian n·∫øu c√≥]\n\n## Ghi ch√∫ c√° nh√¢n\n> [!question] üí° Ghi ch√∫ c√° nh√¢n\n> - [C√°c ghi ch√∫, m·∫πo nh·ªõ t·ª´ c√° nh√¢n, li√™n k·∫øt ƒë·∫øn ki·∫øn th·ª©c ho·∫∑c tr·∫£i nghi·ªám c√° nh√¢n ƒë·ªÉ nh·ªõ t·ª´ d·ªÖ h∆°n]\n> - [C√°c m·∫πo ghi nh·ªõ nghƒ©a, c√°ch d√πng ho·∫∑c ph√°t √¢m]\n\n## ·∫¢nh minh h·ªça\n> [!image] üñºÔ∏è ·∫¢nh minh h·ªça\n> ![[·∫£nh minh h·ªça t·ª´ v·ª±ng.jpg]]\n\n## C√°c d·∫°ng li√™n quan (Aliases)\n### {{alias 1}}\n> [!important] üîÑ [[alias 1]]\n> - **Lo·∫°i t·ª´**: [noun/verb/adjective/...]\n> - **ƒê·ªãnh nghƒ©a ng·∫Øn g·ªçn**: [ƒê∆∞a ra ƒë·ªãnh nghƒ©a ng·∫Øn g·ªçn ho·∫∑c m√¥ t·∫£ m·ªëi quan h·ªá v·ªõi t·ª´ g·ªëc]\n> - **V√≠ d·ª•**: [C√¢u v√≠ d·ª• s·ª≠ d·ª•ng alias n√†y trong ng·ªØ c·∫£nh t·ª± nhi√™n]\n> - **L∆∞u √Ω s·ª≠ d·ª•ng**: [C√°c l∆∞u √Ω ƒë·∫∑c bi·ªát v·ªÅ c√°ch s·ª≠ d·ª•ng, n·∫øu c√≥]\n\n## N·ªôi dung cho Anki\n```\nSTART\nEN-Words\nVocabulary: {t·ª´ v·ª±ng}\nPronunciation: {ph√°t √¢m qu·ªëc t·∫ø}\nDefinition: {ƒë·ªãnh nghƒ©a ti·∫øng Vi·ªát ng·∫Øn g·ªçn}\nAudio: ![[{t·ª´ v·ª±ng}.mp3]]\nExample: {c√¢u v√≠ d·ª• ƒë·∫ßu ti√™n}\nExample Translation: {b·∫£n d·ªãch c·ªßa c√¢u v√≠ d·ª•}\nImage: {m√¥ t·∫£ ho·∫∑c li√™n k·∫øt ƒë·∫øn h√¨nh ·∫£nh}\nNotes: {ghi ch√∫ quan tr·ªçng v·ªÅ c√°ch s·ª≠ d·ª•ng}\nPart of Speech: {lo·∫°i t·ª´}\nSynonyms: {t·ª´ ƒë·ªìng nghƒ©a, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}\nAntonyms: {t·ª´ tr√°i nghƒ©a, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}\nTags: {c·∫•p ƒë·ªô, ch·ªß ƒë·ªÅ, lo·∫°i t·ª´, lƒ©nh v·ª±c s·ª≠ d·ª•ng, tr·∫°ng th√°i h·ªçc t·∫≠p (new/review/mastered)}\nLinks: {li√™n k·∫øt ƒë·∫øn c√°c t·ª´ li√™n quan}\nID: {c·∫•p ƒë·ªô}_{ng√†y t·∫°o yyyymmdd}_{hash 4 s·ªë c·ªßa t·ª´ v·ª±ng}\nEND\n```",
    "input_folder": "",
    "output_folder": "",
    "single_word": ""
}

class AIProcessorThread(QThread):
    progress = Signal(int)
    status = Signal(str)
    finished = Signal()
    error = Signal(str)

    def __init__(self, items, mode, prompt, api_key, model, output_folder, parent=None):
        super().__init__(parent)
        self.items = items
        self.mode = mode
        self.prompt = prompt
        self.api_key = api_key
        self.model = model
        self.output_folder = output_folder
        self.is_paused = False
        self.should_stop = False

    def run(self):
        try:
            total_items = len(self.items)
            for i, item in enumerate(self.items):
                if self.should_stop:
                    break
                while self.is_paused:
                    self.msleep(100)
                    if self.should_stop:
                        break

                self.status.emit(f"Processing ({i+1}/{total_items}): {os.path.basename(item)}")
                
                content_to_process = ""
                output_filename = ""

                if self.mode == 'markdown':
                    with open(item, 'r', encoding='utf-8') as f:
                        content_to_process = f"[{os.path.basename(item)}]\n\n{f.read()}"
                    output_path = item # Overwrite original file
                else: # TXT file or Single Word mode
                    word = item
                    content_to_process = f"T·ª´ v·ª±ng: {word}"
                    safe_word = "".join(c for c in word if c.isalnum() or c in (' ', '-', '_')).strip()
                    output_filename = f"{safe_word}.md"
                    output_path = os.path.join(self.output_folder, output_filename)
                    count = 1
                    base, ext = os.path.splitext(output_path)
                    while os.path.exists(output_path):
                        output_path = f"{base}_{count}{ext}"
                        count += 1
                
                full_prompt = f"{self.prompt}\n\n{content_to_process}"
                processed_content = self.process_with_ai(full_prompt)
                
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(processed_content)
                
                self.progress.emit(int((i + 1) / total_items * 100))

            if self.should_stop:
                self.status.emit("Processing stopped by user.")
            else:
                self.status.emit("Processing complete!")
            self.finished.emit()
        except Exception as e:
            self.error.emit(str(e))
    
    def process_with_ai(self, content):
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={self.api_key}"
        headers = {'Content-Type': 'application/json'}
        data = {"contents": [{"parts": [{"text": content}]}]}
        try:
            response = requests.post(url, headers=headers, json=data, timeout=120)
            response.raise_for_status()
            result = response.json()
            return result.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', '')
        except requests.exceptions.RequestException as e:
            raise Exception(f"API Request Error: {e}")

    def pause(self):
        self.is_paused = True

    def resume(self):
        self.is_paused = False

    def stop(self):
        self.should_stop = True

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AIVocab")
        self.setMinimumSize(800, 600)
        self.setWindowIcon(QIcon(resource_path("app_icon.ico")))
        self.settings_file = 'settings.json'
        
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)

        # --- Warning Note ---
        warning_label = QLabel("Note: The free API tier is limited to about 60 words per minute.")
        warning_label.setAlignment(Qt.AlignCenter)
        palette = warning_label.palette()
        palette.setColor(QPalette.WindowText, QColor("orange"))
        warning_label.setPalette(palette)
        main_layout.addWidget(warning_label)
        
        splitter = QSplitter(Qt.Horizontal)
        main_layout.addWidget(splitter)
        
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)
        
        # --- Processing Mode ---
        mode_group_box = QFrame()
        mode_group_box.setFrameShape(QFrame.StyledPanel)
        mode_layout = QVBoxLayout(mode_group_box)
        mode_layout.addWidget(QLabel("Processing Mode:"))
        self.mode_group = QButtonGroup(self)
        
        self.md_radio = QRadioButton("Process Markdown File(s)")
        self.txt_radio = QRadioButton("Process TXT Word List")
        self.single_word_radio = QRadioButton("Process Single Word")
        
        self.mode_group.addButton(self.md_radio, 0)
        self.mode_group.addButton(self.txt_radio, 1)
        self.mode_group.addButton(self.single_word_radio, 2)
        
        mode_layout.addWidget(self.md_radio)
        mode_layout.addWidget(self.txt_radio)
        mode_layout.addWidget(self.single_word_radio)
        self.md_radio.setChecked(True)
        self.mode_group.idClicked.connect(self.on_mode_changed)
        left_layout.addWidget(mode_group_box)

        # --- Input Widgets ---
        self.input_stack = QStackedWidget()
        self.setup_input_widgets()
        left_layout.addWidget(self.input_stack)

        # --- Output Folder (for TXT and Single Word modes) ---
        self.output_folder_widget = QWidget()
        output_layout = QHBoxLayout(self.output_folder_widget)
        output_layout.setContentsMargins(0, 0, 0, 0)
        output_layout.addWidget(QLabel("Output Folder:"))
        self.output_path_input = QLineEdit()
        self.output_path_input.setReadOnly(True)
        browse_output_btn = QPushButton("Browse...")
        browse_output_btn.clicked.connect(self.select_output_folder)
        output_layout.addWidget(self.output_path_input)
        output_layout.addWidget(browse_output_btn)
        left_layout.addWidget(self.output_folder_widget)

        # --- API Config ---
        api_group = QFrame()
        api_group.setFrameShape(QFrame.StyledPanel)
        api_layout = QVBoxLayout(api_group)
        api_key_layout = QHBoxLayout()
        api_key_layout.addWidget(QLabel("API Key:"))
        self.api_key_input = QLineEdit()
        self.api_key_input.setEchoMode(QLineEdit.Password)
        api_key_layout.addWidget(self.api_key_input)
        api_layout.addLayout(api_key_layout)
        left_layout.addWidget(api_group)
        
        # --- Prompt ---
        prompt_group = QFrame()
        prompt_group.setFrameShape(QFrame.StyledPanel)
        prompt_layout = QVBoxLayout(prompt_group)
        prompt_layout.addWidget(QLabel("Prompt:"))
        self.prompt_edit = QTextEdit()
        self.prompt_edit.setMinimumHeight(100)
        prompt_layout.addWidget(self.prompt_edit)
        left_layout.addWidget(prompt_group)
        
        left_layout.addStretch()

        # --- Controls & Progress ---
        self.progress_bar = QProgressBar()
        self.status_label = QLabel("Ready")
        self.status_label.setAlignment(Qt.AlignCenter)
        
        controls_layout = QHBoxLayout()
        self.pause_button = QPushButton("Pause")
        self.stop_button = QPushButton("Stop")
        self.process_button = QPushButton("Process")

        self.pause_button.setEnabled(False)
        self.stop_button.setEnabled(False)

        self.pause_button.clicked.connect(self.toggle_pause)
        self.stop_button.clicked.connect(self.stop_processing)
        self.process_button.clicked.connect(self.process_files)

        controls_layout.addWidget(self.pause_button)
        controls_layout.addWidget(self.stop_button)

        left_layout.addWidget(self.progress_bar)
        left_layout.addWidget(self.status_label)
        left_layout.addLayout(controls_layout)
        left_layout.addWidget(self.process_button)
        
        # --- Right Panel (File List) ---
        self.right_panel = QWidget()
        right_layout = QVBoxLayout(self.right_panel)
        search_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Search files...")
        self.search_input.textChanged.connect(self.filter_files)
        search_layout.addWidget(self.search_input)
        
        self.select_all_button = QPushButton("Select All")
        self.select_all_button.clicked.connect(self.toggle_select_all)
        search_layout.addWidget(self.select_all_button)
        right_layout.addLayout(search_layout)
        
        self.file_list = QListWidget()
        self.file_list.setSelectionMode(QListWidget.MultiSelection)
        right_layout.addWidget(self.file_list)
        
        splitter.addWidget(left_panel)
        splitter.addWidget(self.right_panel)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 1)
        
        self.load_settings()
        self.on_mode_changed(self.mode_group.checkedId())

    def setup_input_widgets(self):
        # Markdown Mode Widget
        md_widget = QWidget()
        md_layout = QHBoxLayout(md_widget)
        md_layout.setContentsMargins(0, 0, 0, 0)
        md_layout.addWidget(QLabel("Source Folder:"))
        self.md_path_input = QLineEdit()
        self.md_path_input.setReadOnly(True)
        browse_md_btn = QPushButton("Browse...")
        browse_md_btn.clicked.connect(self.select_md_folder)
        md_layout.addWidget(self.md_path_input)
        md_layout.addWidget(browse_md_btn)
        self.input_stack.addWidget(md_widget)

        # TXT File Mode Widget
        txt_widget = QWidget()
        txt_layout = QHBoxLayout(txt_widget)
        txt_layout.setContentsMargins(0, 0, 0, 0)
        txt_layout.addWidget(QLabel("Source TXT File:"))
        self.txt_path_input = QLineEdit()
        self.txt_path_input.setReadOnly(True)
        browse_txt_btn = QPushButton("Browse...")
        browse_txt_btn.clicked.connect(self.select_txt_file)
        txt_layout.addWidget(self.txt_path_input)
        txt_layout.addWidget(browse_txt_btn)
        self.input_stack.addWidget(txt_widget)

        # Single Word Mode Widget
        word_widget = QWidget()
        word_layout = QHBoxLayout(word_widget)
        word_layout.setContentsMargins(0, 0, 0, 0)
        word_layout.addWidget(QLabel("Single Word:"))
        self.word_input = QLineEdit()
        self.word_input.setPlaceholderText("Enter a word to process...")
        word_layout.addWidget(self.word_input)
        self.input_stack.addWidget(word_widget)

    def on_mode_changed(self, mode_id):
        self.input_stack.setCurrentIndex(mode_id)
        if mode_id == 0: # Markdown
            self.output_folder_widget.setVisible(False)
            self.right_panel.setVisible(True)
        elif mode_id == 1: # TXT File
            self.output_folder_widget.setVisible(True)
            self.right_panel.setVisible(False)
        elif mode_id == 2: # Single Word
            self.output_folder_widget.setVisible(True)
            self.right_panel.setVisible(False)

    def select_md_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Source Folder", self.md_path_input.text())
        if folder:
            self.md_path_input.setText(folder)
            self.load_files_from_folder(folder)

    def select_txt_file(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select TXT Word List", "", "Text Files (*.txt)")
        if file_path:
            self.txt_path_input.setText(file_path)

    def select_output_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Output Folder", self.output_path_input.text())
        if folder:
            self.output_path_input.setText(folder)
    
    def load_files_from_folder(self, folder):
        self.file_list.clear()
        if folder and os.path.isdir(folder):
            try:
                for file in os.listdir(folder):
                    if file.lower().endswith('.md'):
                        self.file_list.addItem(file)
            except Exception as e:
                self.status_label.setText(f"Error reading folder: {e}")

    def process_files(self):
        if not self.api_key_input.text():
            QMessageBox.warning(self, "Input Error", "Please enter your API key.")
            return

        mode_id = self.mode_group.checkedId()
        items_to_process = []
        mode_str = ""
        output_folder = self.output_path_input.text()

        if mode_id == 0: # Markdown
            selected_items = self.file_list.selectedItems()
            if not selected_items:
                QMessageBox.warning(self, "Input Error", "Please select at least one Markdown file.")
                return
            items_to_process = [os.path.join(self.md_path_input.text(), item.text()) for item in selected_items]
            mode_str = "markdown"

        elif mode_id == 1: # TXT
            txt_file = self.txt_path_input.text()
            if not txt_file or not os.path.exists(txt_file):
                QMessageBox.warning(self, "Input Error", "Please select a valid TXT file.")
                return
            if not output_folder:
                QMessageBox.warning(self, "Input Error", "Please select an output folder.")
                return
            with open(txt_file, 'r', encoding='utf-8') as f:
                items_to_process = [line.strip() for line in f if line.strip()]
            mode_str = "txt"

        elif mode_id == 2: # Single Word
            word = self.word_input.text().strip()
            if not word:
                QMessageBox.warning(self, "Input Error", "Please enter a word.")
                return
            if not output_folder:
                QMessageBox.warning(self, "Input Error", "Please select an output folder.")
                return
            items_to_process = [word]
            mode_str = "single_word"
        
        if not items_to_process:
            QMessageBox.information(self, "Information", "Nothing to process.")
            return

        self.set_controls_enabled(False)

        self.processor = AIProcessorThread(
            items_to_process, mode_str, self.prompt_edit.toPlainText(),
            self.api_key_input.text(), "gemini", output_folder
        )
        self.processor.progress.connect(self.progress_bar.setValue)
        self.processor.status.connect(self.status_label.setText)
        self.processor.finished.connect(self.processing_finished)
        self.processor.error.connect(self.processing_error)
        self.processor.start()

    def set_controls_enabled(self, is_enabled):
        self.process_button.setEnabled(is_enabled)
        self.pause_button.setEnabled(not is_enabled)
        self.stop_button.setEnabled(not is_enabled)
        # Disable mode switching during processing
        self.md_radio.setEnabled(is_enabled)
        self.txt_radio.setEnabled(is_enabled)
        self.single_word_radio.setEnabled(is_enabled)

    def toggle_pause(self):
        if hasattr(self, 'processor') and self.processor.isRunning():
            if self.processor.is_paused:
                self.processor.resume()
                self.pause_button.setText("Pause")
            else:
                self.processor.pause()
                self.pause_button.setText("Resume")

    def stop_processing(self):
        if hasattr(self, 'processor'):
            self.processor.stop()

    def processing_finished(self):
        self.status_label.setText("Processing complete!")
        self.set_controls_enabled(True)
        self.pause_button.setText("Pause")
        QMessageBox.information(self, "Success", "All items have been processed successfully!")

    def processing_error(self, error_msg):
        self.status_label.setText("An error occurred.")
        self.set_controls_enabled(True)
        self.pause_button.setText("Pause")
        QMessageBox.critical(self, "Processing Error", f"An error occurred:\n{error_msg}")

    def load_settings(self):
        if os.path.exists(self.settings_file):
            try:
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
            except Exception:
                settings = DEFAULT_SETTINGS
        else:
            settings = DEFAULT_SETTINGS
        
        self.api_key_input.setText(settings.get('api_key', ''))
        self.prompt_edit.setText(settings.get('prompt', ''))
        self.md_path_input.setText(settings.get('input_folder', ''))
        self.output_path_input.setText(settings.get('output_folder', ''))
        self.word_input.setText(settings.get('single_word', ''))

        if self.md_path_input.text():
            self.load_files_from_folder(self.md_path_input.text())
    
    def save_settings(self):
        settings = {
            'api_key': self.api_key_input.text(),
            'prompt': self.prompt_edit.toPlainText(),
            'input_folder': self.md_path_input.text(),
            'output_folder': self.output_path_input.text(),
            'single_word': self.word_input.text()
        }
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Could not save settings: {e}")

    def closeEvent(self, event):
        self.save_settings()
        event.accept()

    def filter_files(self):
        search_text = self.search_input.text().lower()
        for i in range(self.file_list.count()):
            item = self.file_list.item(i)
            item.setHidden(search_text not in item.text().lower())

    def toggle_select_all(self):
        all_selected = all(self.file_list.item(i).isSelected() for i in range(self.file_list.count()) if not self.file_list.item(i).isHidden())
        if all_selected:
            self.file_list.clearSelection()
            self.select_all_button.setText("Select All")
        else:
            for i in range(self.file_list.count()):
                if not self.file_list.item(i).isHidden():
                    self.file_list.item(i).setSelected(True)
            self.select_all_button.setText("Deselect All")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    # Use a dummy icon file name for the path function to work
    # You MUST create an 'app_icon.ico' file in the same directory as the script
    # or the bundled .exe for the icon to appear.
    try:
        if os.path.exists('app_icon.ico'):
             app.setWindowIcon(QIcon(resource_path('app_icon.ico')))
    except Exception as e:
        print(f"Could not load app icon: {e}")

    window = MainWindow()
    window.show()
    sys.exit(app.exec())
